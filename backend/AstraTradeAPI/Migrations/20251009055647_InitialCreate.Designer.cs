// <auto-generated />
using System;
using AstraTradeAPI.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace AstraTradeAPI.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20251009055647_InitialCreate")]
    partial class InitialCreate
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "9.0.9")
                .HasAnnotation("Relational:MaxIdentifierLength", 64);

            MySqlModelBuilderExtensions.AutoIncrementColumns(modelBuilder);

            modelBuilder.Entity("AstraTradeAPI.Models.Advertisement", b =>
                {
                    b.Property<int>("AdvertisementID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("AdvertisementID"));

                    b.Property<string>("AdType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("CategoryID")
                        .HasColumnType("int");

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Image")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("PostDate")
                        .HasColumnType("datetime(6)");

                    b.Property<decimal?>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("AdvertisementID");

                    b.HasIndex("CategoryID");

                    b.HasIndex("UserID");

                    b.ToTable("Advertisements");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Category", b =>
                {
                    b.Property<int>("CategoryID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("CategoryID"));

                    b.Property<string>("Description")
                        .HasColumnType("longtext");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("CategoryID");

                    b.ToTable("Categories");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Chat", b =>
                {
                    b.Property<int>("ChatID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ChatID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("ReceiverID")
                        .HasColumnType("int");

                    b.Property<int?>("SenderID")
                        .HasColumnType("int");

                    b.HasKey("ChatID");

                    b.HasIndex("ReceiverID");

                    b.HasIndex("SenderID");

                    b.ToTable("Chats");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Feedback", b =>
                {
                    b.Property<int>("FeedbackID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("FeedbackID"));

                    b.Property<int?>("AdvertisementID")
                        .HasColumnType("int");

                    b.Property<string>("Comment")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<int>("Score")
                        .HasColumnType("int");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("FeedbackID");

                    b.HasIndex("AdvertisementID");

                    b.HasIndex("UserID", "AdvertisementID")
                        .IsUnique();

                    b.ToTable("Feedbacks");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Notification", b =>
                {
                    b.Property<int>("NotifyID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("NotifyID"));

                    b.Property<DateTime>("DateTime")
                        .HasColumnType("datetime(6)");

                    b.Property<bool>("IsRead")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Message")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Type")
                        .HasColumnType("longtext");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("NotifyID");

                    b.HasIndex("UserID");

                    b.ToTable("Notifications");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Package", b =>
                {
                    b.Property<int>("PackageID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PackageID"));

                    b.Property<int>("Duration")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(65,30)");

                    b.HasKey("PackageID");

                    b.ToTable("Packages");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Payment", b =>
                {
                    b.Property<int>("PaymentID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("PaymentID"));

                    b.Property<decimal?>("Amount")
                        .HasColumnType("decimal(65,30)");

                    b.Property<DateTime>("Date")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("Method")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("PackageID")
                        .HasColumnType("int");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("PaymentID");

                    b.HasIndex("PackageID");

                    b.HasIndex("UserID");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Report", b =>
                {
                    b.Property<int>("ReportID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("ReportID"));

                    b.Property<int?>("AdvertisementID")
                        .HasColumnType("int");

                    b.Property<string>("Reason")
                        .HasColumnType("longtext");

                    b.Property<DateTime>("ReportDate")
                        .HasColumnType("datetime(6)");

                    b.Property<string>("ReportType")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<int?>("UserID")
                        .HasColumnType("int");

                    b.HasKey("ReportID");

                    b.HasIndex("AdvertisementID");

                    b.HasIndex("UserID");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.User", b =>
                {
                    b.Property<int>("UserID")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    MySqlPropertyBuilderExtensions.UseMySqlIdentityColumn(b.Property<int>("UserID"));

                    b.Property<string>("Address")
                        .HasMaxLength(255)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasMaxLength(150)
                        .HasColumnType("varchar(150)");

                    b.Property<bool>("IsActivated")
                        .HasColumnType("tinyint(1)");

                    b.Property<bool>("IsVIP")
                        .HasColumnType("tinyint(1)");

                    b.Property<string>("Password")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Phone")
                        .HasMaxLength(20)
                        .HasColumnType("varchar(20)");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("longtext");

                    b.Property<string>("Username")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("varchar(100)");

                    b.HasKey("UserID");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Advertisement", b =>
                {
                    b.HasOne("AstraTradeAPI.Models.Category", "Category")
                        .WithMany("Advertisements")
                        .HasForeignKey("CategoryID");

                    b.HasOne("AstraTradeAPI.Models.User", "User")
                        .WithMany("Advertisements")
                        .HasForeignKey("UserID");

                    b.Navigation("Category");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Chat", b =>
                {
                    b.HasOne("AstraTradeAPI.Models.User", "Receiver")
                        .WithMany()
                        .HasForeignKey("ReceiverID");

                    b.HasOne("AstraTradeAPI.Models.User", "Sender")
                        .WithMany()
                        .HasForeignKey("SenderID");

                    b.Navigation("Receiver");

                    b.Navigation("Sender");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Feedback", b =>
                {
                    b.HasOne("AstraTradeAPI.Models.Advertisement", "Advertisement")
                        .WithMany("Feedbacks")
                        .HasForeignKey("AdvertisementID");

                    b.HasOne("AstraTradeAPI.Models.User", "User")
                        .WithMany("Feedbacks")
                        .HasForeignKey("UserID");

                    b.Navigation("Advertisement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Notification", b =>
                {
                    b.HasOne("AstraTradeAPI.Models.User", "User")
                        .WithMany("Notifications")
                        .HasForeignKey("UserID");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Payment", b =>
                {
                    b.HasOne("AstraTradeAPI.Models.Package", "Package")
                        .WithMany("Payments")
                        .HasForeignKey("PackageID");

                    b.HasOne("AstraTradeAPI.Models.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserID");

                    b.Navigation("Package");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Report", b =>
                {
                    b.HasOne("AstraTradeAPI.Models.Advertisement", "Advertisement")
                        .WithMany("Reports")
                        .HasForeignKey("AdvertisementID");

                    b.HasOne("AstraTradeAPI.Models.User", "User")
                        .WithMany("Reports")
                        .HasForeignKey("UserID");

                    b.Navigation("Advertisement");

                    b.Navigation("User");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Advertisement", b =>
                {
                    b.Navigation("Feedbacks");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Category", b =>
                {
                    b.Navigation("Advertisements");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.Package", b =>
                {
                    b.Navigation("Payments");
                });

            modelBuilder.Entity("AstraTradeAPI.Models.User", b =>
                {
                    b.Navigation("Advertisements");

                    b.Navigation("Feedbacks");

                    b.Navigation("Notifications");

                    b.Navigation("Payments");

                    b.Navigation("Reports");
                });
#pragma warning restore 612, 618
        }
    }
}
